package FipsAgentPanel;import SuperPack.AbstractAgentPanel.AgentRobot;import SuperPack.Panel.Intelligence;import SuperPack.Panel.Point2;import SuperPack.Panel.SimulationPanel;import java.util.Map;/** * Created by Ishiwatari on 2016/08/12. */public class FipsRobot extends AgentRobot {    int debugKey = -1; //ロボットの向かう先のkey    protected FipsRobot(SimulationPanel as) {        super(as);    }    protected FipsRobot(Point2 point, SimulationPanel s) {        super(point, s);    }    protected FipsRobot(SimulationPanel s, String robotString) {        super(s, robotString);    }    /**     * FIPSに従って、dx,dyを求める     *     * @return     */    @Override    protected Point2 calVelocity() {        double sumX = 0.0, sumY = 0.0;        int n = 0;        Intelligence nealyInteligence = null;        double u1 = Math.random() * 2.0;        double u2 = Math.random() * 2.0;        debugKey = -1;        for (Map.Entry<Integer, Intelligence> entry : intelligenceHashMap.entrySet()) {            //　PIよりも低くなおかつ一番近い            Intelligence eVal = entry.getValue();            if (entry.getKey() != id && eVal.getFitnessValue() <= PI.getFitnessValue()) {                if (nealyInteligence == null ||                        p.distance(eVal.x, eVal.y) + eVal.getFitnessValue() <                                p.distance(nealyInteligence.x, nealyInteligence.y) + nealyInteligence.getFitnessValue()) {                    nealyInteligence = new Intelligence(eVal);                    debugKey = entry.getKey();                }            }        }        Intelligence pi = intelligenceHashMap.get(id);        if (nealyInteligence == null) {            nealyInteligence = new Intelligence(pi);        }        n = 2;        sumX = u1 * (pi.x - p.x) + u2 * (nealyInteligence.x - p.x);        sumY = u1 * (pi.y - p.y) + u2 * (nealyInteligence.y - p.y);        //TODO サイの値がわからんぽよ        double dx = v.x * omega + sumX;        double dy = v.y * omega + sumY;        //速度0の時にランダムな速度を与える        if ((int) v.x == 0 && (int) v.y == 0) {            v.setLocation(Math.random() * maxv, Math.random() * maxv);        }        //fixme デバック用        return new Point2(dx, dy);    }}