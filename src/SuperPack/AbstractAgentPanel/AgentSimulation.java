package SuperPack.AbstractAgentPanel;import PsoPanel.PsoSimulation;import SuperPack.Panel.Enemy;import SuperPack.Panel.SimulationPanel;import java.awt.*;/** * Created by Ishiwatari on 2016/10/25. */abstract public class AgentSimulation extends SimulationPanel {    public AgentList multi; //エージェントのリスト    public int agentNum;            //エージェントの最大数    @Override    public void step() {        count++;        //ロボットを動かす        for (int i = 0; i < robotsNum; i++) {            robot[i].move();        }        //エージェントを動かす        multi.agentsMove(robot);        //重複しているロボットの削除        for (int i = 0; i < robotsNum; i++) {            multi.deleteOverlapAgent((AgentRobot) (robot[i]));        }        //ターゲットの削除        deleteCaptureTarget();    }    @Override    public void copy(SimulationPanel s) {        System.out.println("hoge");        super.copy(s);        //エージェントの初期化        multi.clear();        for (int i = 0; i < agentNum; i++)            multi.addAgent(new Agent((AgentRobot) robot[i], new Color(105 + (i * 31) % 100, 55 + (i * 23) % 200, 105 + (i * 13) % 100)));    }    @Override    public void paintComponent(Graphics g) {        Graphics2D g2 = (Graphics2D) g;        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,                RenderingHints.VALUE_ANTIALIAS_ON);        g2.setColor(new Color(255, 255, 255));        g2.fillRect(startX, startY, length, length);        g2.setColor(Color.BLACK);        g2.drawRect(startX, startY, length, length);        g2.drawString("STEP:" + this.count, startX + 5, startY + length + 20);        //ターゲットの描写        synchronized (targetList) {            for (Enemy target : targetList) {                target.paint(g2, true);            }        }        if (debugMode == -1) {            for (int i = 0; i < robot.length; i++)                robot[i].paint(g2);            multi.paint(g2);        } else {            //デバック用の描写            debugPaint(g2);        }    }    /**     * デバック用の描写     *     * @param g2     */    protected void debugPaint(Graphics2D g2) {        for (int i = 0; i < robotsNum; i++) {            if (robot[i].id == debugMode) {                robot[i].paint(g2);                int ciSwingX = (int) (robot[i].CI.x * PsoSimulation.length / PsoSimulation.size + SimulationPanel.startX);                int ciSwingY = (int) ((PsoSimulation.size - robot[i].CI.y) * PsoSimulation.length / PsoSimulation.size + SimulationPanel.startY);                g2.setColor(Color.GREEN);                g2.fillOval(ciSwingX - 3, ciSwingY - 3, 6, 6);                int piSwingX = (int) (robot[i].PI.x * PsoSimulation.length / PsoSimulation.size + SimulationPanel.startX);                int piSwingY = (int) ((PsoSimulation.size - robot[i].PI.y) * PsoSimulation.length / PsoSimulation.size + SimulationPanel.startY);                g2.setColor(Color.YELLOW);                g2.fillOval(piSwingX - 3, piSwingY - 3, 6, 6);                break;            }        }    }}