package SuperPack.AbstractAgentPanel;import SuperPack.Panel.Intelligence;import SuperPack.Panel.Robot;import java.awt.*;import java.util.HashMap;import java.util.Map;/** * Created by Ishiwatari on 2016/10/25. */public class AgentList {    public Agent agent;    public AgentList next;    public AgentList() {        agent = null;        next = null;    }    protected AgentList(Agent a) {        agent = a;        next = null;    }    /**     * Agentのついか     *     * @param agent 追加するAgent     */    public void addAgent(Agent agent) {        getLast().next = new AgentList(agent);    }    /**     * AgentListのすべてのAgentを移動&更新     *     * @param robots ロボットの群れ     */    public void agentsMove(Robot[] robots) {        if (agent != null) {            //捕獲していたら            if (agent.arobot.isCaptured)                agent.captured();            agent.agentMove((AgentRobot[]) robots);            agent.updateAI();        }        if (next != null)            next.agentsMove(robots);    }    /**     * robot上にある重複しているエ－ジェントを削除する再帰関数     *     * @param robot 　エージェントの配下にあるロボット     * @return 削除後のエージェントのリスト     */    public AgentList deleteOverlapAgent(AgentRobot robot) {        if (agent != null && next != null && agent.arobot == robot) {            Agent ag = next.getAgent(robot); //同一ロボットにいるエージェントの取得            if (ag == null)                return (this);            agent.logList.addAll(ag.logList);            //削除情報の結合            ag.removeHashMap.putAll(agent.removeHashMap);            agent.removeHashMap = new HashMap<>(ag.removeHashMap);            for (Map.Entry<Integer, Intelligence> removeEntry : ag.removeHashMap.entrySet()) {                int key = removeEntry.getKey();                Intelligence val = removeEntry.getValue();                Intelligence agentValue = agent.intelligenceHashMap.get(key);                Intelligence agValue = ag.intelligenceHashMap.get(key);                if (agentValue != null && agentValue.equals(val)) {                    agent.intelligenceHashMap.remove(key);                }                if (agValue != null && agValue.equals(val)) {                    ag.intelligenceHashMap.remove(key);                }            }            //ハッシュマップの結合            for (Map.Entry<Integer, Intelligence> agEntry : ag.intelligenceHashMap.entrySet()) {                int key = agEntry.getKey();                Intelligence agValue = agEntry.getValue();                Intelligence agentValue = agent.intelligenceHashMap.get(key);                if (agentValue == null) {                    agent.intelligenceHashMap.put(key, new Intelligence(agValue));                } else {                    if (agValue.getFitnessValue() < agentValue.getFitnessValue()) {                        agent.intelligenceHashMap.put(key, new Intelligence(agValue));                    }                }            }            next = next.delAgent(ag);            return (this);        }        if (next == null)            return this;        next = next.deleteOverlapAgent(robot);        return (this);    }    public AgentList delAgent(Agent a) {        if (a == agent)            return next;        if (next == null)            return null;        next = next.delAgent(a);        return (this);    }    public void clear() {        if (next != null)            next.clear();        agent = null;        next = null;    }    public void paint(Graphics2D g2) {        if (agent != null)            agent.paint(g2);        if (next != null)            next.paint(g2);    }    protected AgentList getLast() {        if (next == null)            return this;        return next.getLast();    }    void robotLogReset() {        if (agent != null)            agent.logReset();        if (next != null) {            next.robotLogReset();        }    }    /**     * 指定したrobot上にあるagentの取得     *     * @param robot 検索するrobot     * @return robot上にあるagent     */    public Agent getAgent(AgentRobot robot) {        if (agent != null && agent.arobot.equals(robot))            return agent;        if (next == null)            return null;        return next.getAgent(robot);    }    @Override    public String toString() {        String string = agent + ":";        if (next != null)            string += next.toString();        return string;    }}