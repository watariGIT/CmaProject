package SuperPack.AbstractAgentPanel;import PsoPanel.PsoSimulation;import SuperPack.Panel.Intelligence;import SuperPack.Panel.Point2;import SuperPack.Panel.SimulationPanel;import java.awt.*;import java.util.ArrayList;import java.util.HashMap;import java.util.Map;/** * Created by Ishiwatari on 2016/10/25. */public class Agent {    protected Intelligence AI;    public HashMap<Integer, Intelligence> removeHashMap; //削除する情報    HashMap<Integer, Intelligence> intelligenceHashMap; //keyロボットのID Value:そこから得た座標    public AgentRobot arobot;    public ArrayList<AgentRobot> logList;    private final static int range = 200;    private Color color;    private ArrayList<Intelligence> ciProcess;    private ArrayList<Point2> agentProcess;    public Agent(AgentRobot agentRobot) {        AI = new Intelligence(agentRobot.PI);        removeHashMap = new HashMap<>();        arobot = agentRobot;        logList = new ArrayList<>();        logList.add(agentRobot);        ciProcess = new ArrayList<>();        ciProcess.add(new Intelligence(AI));        agentProcess = new ArrayList<>();        agentProcess.add(arobot.p);        color = new Color(55, 55, 155);        intelligenceHashMap = new HashMap<>();        intelligenceHashMap.put(agentRobot.id, new Intelligence(agentRobot.PI));    }    public Agent(AgentRobot agentRobot, Color col) {        AI = new Intelligence(agentRobot.PI); //TODO 糞        removeHashMap = new HashMap<>();        arobot = agentRobot;        logList = new ArrayList<>();        logList.add(agentRobot);        ciProcess = new ArrayList<>();        ciProcess.add(new Intelligence(AI));        agentProcess = new ArrayList<>();        agentProcess.add(arobot.p);        color = col;        intelligenceHashMap = new HashMap<>();        intelligenceHashMap.put(agentRobot.id, new Intelligence(agentRobot.PI));    }    void logReset() {        logList.clear();    }    void setRobot(AgentRobot ag) {        arobot = ag;    }    void agentMove(AgentRobot robots[]) {        AgentRobot next = null;        //次の行き先の決定        // 前方優先        for (int i = 0; i < arobot.field.robotsNum; i++) {            if (arobot.p.distance(robots[i].p) < range && arobot != robots[i]) {                if (next == null                        || getAngle(robots[i], Math.toRadians(0)) < getAngle(                        next, Math.toRadians(0))                        && ContainNumInList(logList, robots[i]) < ContainNumInList(logList, arobot))                    next = robots[i];            }        }        //次のロボットが確定した場合        if (next != null) {            arobot = next;            arobot.field.communication_num++;        }        //ログに現在のロボットを追加        logList.add(arobot);        arobot.omega = 0.9;        if (arobot.v.distance(new Point2(0, 0)) == 0) {            arobot.v.setLocation((int) (Math.random() * SuperPack.Panel.Robot.maxv), (int) (Math.random() * SuperPack.Panel.Robot.maxv));        }        ciProcess.add(new Intelligence(AI));        agentProcess.add(arobot.p);    }    /**     * ターゲットを捕獲した際に行う処理     */    protected void captured() {        removeHashMap.put(AI.hashCode(), AI);        intelligenceHashMap = new HashMap<>();        intelligenceHashMap.put(arobot.id, new Intelligence(arobot.PI));    }    /**     * AgentのAI：ROBOTのCIを更新するメソッド     */    protected void updateAI() {        //削除データのマージ        removeHashMap.putAll(arobot.removeHashMap);        arobot.removeHashMap = new HashMap<>(removeHashMap);        //古い情報の削除        for (Map.Entry<Integer, Intelligence> removeEntry : removeHashMap.entrySet()) {            int key = removeEntry.getKey();            Intelligence val = removeEntry.getValue();            Intelligence agentValue = intelligenceHashMap.get(key);            Intelligence robotValue = arobot.intelligenceHashMap.get(key);            //エージェントの情報の削除            if (agentValue != null && agentValue.equals(val)) {                intelligenceHashMap.remove(key);            }            //ロボットの情報の削除            if (robotValue != null && robotValue.equals(val)) {                arobot.intelligenceHashMap.remove(key);                if (key == arobot.id)                    arobot.intelligenceHashMap.put(key, new Intelligence(arobot.p.x, arobot.p.y, arobot.field.targetList));            }        }        //ロボットの情報の更新        for (Map.Entry<Integer, Intelligence> agentEntry : intelligenceHashMap.entrySet()) {            int key = agentEntry.getKey();            Intelligence agentValue = agentEntry.getValue();            Intelligence robotValue = arobot.intelligenceHashMap.get(key);            if (robotValue == null) {                arobot.intelligenceHashMap.put(key, new Intelligence(agentValue));            } else {                if (agentValue.getFitnessValue() < robotValue.getFitnessValue()) {                    arobot.intelligenceHashMap.put(key, new Intelligence(agentValue));                }            }        }        //エージェントの情報の更新        for (Map.Entry<Integer, Intelligence> robotEntry : arobot.intelligenceHashMap.entrySet()) {            intelligenceHashMap.put(robotEntry.getKey(), new Intelligence(robotEntry.getValue()));        }        //fixme デバック用        double sX = 0, sY = 0;        for (Map.Entry<Integer, Intelligence> entry : intelligenceHashMap.entrySet()) {            sX += entry.getValue().x;            sY += entry.getValue().y;        }        AI.x = sX / intelligenceHashMap.size();        AI.y = sY / intelligenceHashMap.size();        //printIntelligence();    }    /**     * デバック用     */    private void printIntelligence() {        System.out.println("------------------Agent robot" + arobot.id + "--------------------------------");        for (Map.Entry<Integer, Intelligence> entry : intelligenceHashMap.entrySet()) {            System.out.println("id: " + entry.getKey() + " value" + entry.getValue() + " fitness" + entry.getValue().getFitnessValue());        }        System.out.println("-----------------------------------------------------");    }    /**     * リストに含まれる要素数を数えるメソッド     *     * @param l       　リスト     * @param searchO 　検索対象     * @return リストに含まれる検索対象の数     */    private int ContainNumInList(ArrayList<AgentRobot> l, AgentRobot searchO) {        int n = 0;        for (AgentRobot o : l) {            if (searchO.id == o.id)                n++;        }        return n;    }    private double getAngle(AgentRobot robot, double angle) {        double dx = robot.p.x - arobot.p.x;        double dy = robot.p.y - arobot.p.y;        double angle2 = Math.atan2(dy, dx);        double r = Math.abs((arobot.angle + angle - angle2)) % (Math.PI * 2);        if (r > Math.PI)            r = Math.PI - (r % Math.PI);        return r;    }    void paint(Graphics2D g2) {        //エージェント表示        double scale = (double) (PsoSimulation.length) / (PsoSimulation.size);        g2.setColor(color);        g2.setStroke(new BasicStroke(3));        g2.drawOval(arobot.getSwingPoint().x - 8,                arobot.getSwingPoint().y - 8,                16, 16);        g2.setStroke(new BasicStroke(1));        //AIの表示        /*        int aiSwingX = (int) (AI.x * PsoSimulation.length / PsoSimulation.size + SimulationPanel.startX);        int aiSwingY = (int) ((PsoSimulation.size - AI.y) * PsoSimulation.length / PsoSimulation.size + SimulationPanel.startY);        g2.fillOval(aiSwingX - 3, aiSwingY - 3, 6, 6);*/    }    @Override    public String toString() {        return "FIPS Agent";    }}