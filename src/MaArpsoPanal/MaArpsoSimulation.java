package MaArpsoPanal;import PsoPanel.PsoSimulation;import SuperPack.AbstractAgentPanel.Agent;import SuperPack.AbstractAgentPanel.AgentList;import SuperPack.AbstractAgentPanel.AgentRobot;import SuperPack.AbstractAgentPanel.AgentSimulation;import SuperPack.Panel.Enemy;import SuperPack.Panel.Intelligence;import SuperPack.Panel.SimulationPanel;import java.awt.*;import java.util.HashMap;import java.util.Map;/** * Created by Ishiwatari on 2016/11/01. */public class MaArpsoSimulation extends AgentSimulation {    protected MaArpsoSimulation() {        super();    }    /**     * コンストラクタ     *     * @param agentNum 　エージェントの数     */    public MaArpsoSimulation(int agentNum) {        robot = new MaArpsoRobot[robotsNum];        for (int i = 0; i < targetNum; i++) {            targetList.add(new Enemy());        }        for (int i = 0; i < robotsNum; i++)            robot[i] = new MaArpsoRobot(this);        multi = new AgentList();        this.agentNum = agentNum;        //エージェントの生成        for (int i = 0; i < agentNum; i++) {            multi.addAgent(new Agent((AgentRobot) robot[i], new Color(105 + (i * 31) % 100, 55 + (i * 23) % 200, 105 + (i * 13) % 100)));        }    }    /**     * デバック用の描写     *     * @param g2     */    @Override    protected void debugPaint(Graphics2D g2) {        for (int i = 0; i < robotsNum; i++) {            if (robot[i].id == debugMode) {                robot[i].paint(g2);                //oncurrentModificationException防止用                HashMap<Integer, Intelligence> printMap = new HashMap(((AgentRobot) robot[i]).intelligenceHashMap);                for (Map.Entry<Integer, Intelligence> entry : printMap.entrySet()) {                    int swingX = (int) (entry.getValue().x * PsoSimulation.length / PsoSimulation.size + SimulationPanel.startX);                    int swingY = (int) ((PsoSimulation.size - entry.getValue().y) * PsoSimulation.length / PsoSimulation.size + SimulationPanel.startY);                    if (robot[i].id == entry.getKey()) {                        g2.setColor(Color.YELLOW);                    } else {                        g2.setColor(Color.GREEN);                    }                    g2.fillOval(swingX - 3, swingY - 3, 6, 6);                }                //oldPYの描写                Intelligence oldPi = ((MaArpsoRobot) robot[i]).oldPI;                int swingX = (int) (oldPi.x * PsoSimulation.length / PsoSimulation.size + SimulationPanel.startX);                int swingY = (int) ((PsoSimulation.size - oldPi.y) * PsoSimulation.length / PsoSimulation.size + SimulationPanel.startY);                g2.setColor(Color.GRAY);                g2.fillOval(swingX - 3, swingY - 3, 6, 6);                break;            }        }    }    /**     * 読み込んだファイルから、フィールドを再現するメソッド     *     * @param fileString 読み込むファイル名     */    @Override    public void readFile(String fileString) {        //TODO　実装    }}